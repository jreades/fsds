---
title: "Practical 3: Foundations (Part 2)"
subtitle: "Getting to grips with Dictionaries, LOLs and DOLs"
embed-resources: True
filters:
  - qna
  - quarto
---

In this notebook we are exploring basic (in the sense of fundamental) data structures so that you understand both how to manage more complex types of data and are prepared for what we will encounter when we start using `pandas` to perform data analysis. To achieve that, you will need to be 'fluent' in nested lists and dictionaries; we will focus primarily on lists-of-lists and dictionaries-of-lists, but note that file formats like JSON can be understood as dictionaries-of-dictionaries-of-lists-of-... so this is just a *taster* of real-world data structures.

::: {.callout-tip}

You should download this notebook and then save it to your own copy of the repository. Follow the process used *last* week (i.e. `git add ...`, `git commit -m "..."`, `git push`) right away and then do this again at the end of the class and you'll have a record of everything you did.

:::

# From Lists to Data (Little Steps)

We're going to start off using lists and dictionaries that _we_ define right at the start of the 'program', but the _real_ value of these data structures comes when we build a list or dictionary _from_ data such as a file or a web page... and that's what we're going to do below!

First, here's a reminder of some useful methods (_i.e._ functions) that apply to lists which we covered in the [lecture]({{< var module.web >}}sessions/week2.html#pre-recorded-lectures) and [practical]({{< var module.web >}}sessions/week2.html#practical) in Week 2:

| Method                 | Action |
|------------------------|------------------------------------------------------------------|
| `list.count(x)`        | Return the number of times x appears in the list                 |
| `list.insert(i, x)`    | Insert value `x` at a given position `i`                         |
| `list.pop([i])`        | Remove and return the value at position `i` (`i` is optional)    |
| `list.remove(x)`       | Remove the first element from the list whose value is `x`        |
| `list.reverse()`       | Reverse the elements of the list in place                        |
| `list.sort()`          | Sort the items of the list in place                              |
| `list.index(x)`        | Find the first occurence of `x` in the list                      |
| `list[x:y]`            | Slice the list from index `x` to `y-1`                           |

This should all be revision... because it's how we finished things up _last week_. But I want to go over it _briefly_ again because we're going to build on it this week.

::: {.callout-note}

#### Hint

As before, `??` will highlight where one or more bit of code are missing and need to be filled in...

:::

## List Refresher

::: {.callout-tip collapse="true"}

#### Difficulty: Low.

:::

To complete these tasks, all of the methods that you need are listed above, so this is about testing yourself on your understanding *both* of how to read the help *and* how to index elements in a list.

The next line creates a list of (made up) Airbnb property names where each element is a string:

```{python}
listings = ["Sunny 1-Bed", "Fantastic Dbl",
    "Home-Away-From-Home", "Sunny Single", 
    "Whole House", "Trendy Terrace"]
```

### List Arithmetic

Replace the `??` so that it prints <code>`{python} listings[2+1]`</code>.

:::: {.qna}

#### Question

```{python}
#| eval: False
print(listings[?? + 1])
```

#### Answer

```{python}
print(listings[2 + 1])
```

::::

### Negative List Arithmetic 

Now use a **negative** index to print <code>`{python} listings[-2]`</code>:

:::: {.qna}

#### Question

```{python}
#| eval: False
print(listings[??])
```

#### Answer

```{python}
print(listings[-2])
```

::::

### Finding a Position in a List

Replace the `??` so that it prints the _index_ for <code>`{python} listings[1]`</code> in the list.

:::: {.qna}

#### Question

```{python}
#| eval: False
print("The position of 'Fantastic Dbl' in the list is: " + str( ?? ))
```

#### Answer

```{python}
print("The position of 'Fantastic Dbl' in the list is: " + str( listings.index('Fantastic Dbl')))
```

::::

## Looking Across Lists

::: {.callout-note}

#### Connections

This section draws on the [LOLs]({{< var module.web >}}sessions/week3.html#pre-recorded-lectures) lecture and you will also find Code Camp's [Loops]({{< var module.camp >}}lessons/Loops.html) session useful here.

:::
    
::: {.callout-warning collapse="true"}

#### Difficulty: Medium.

:::

Notice that the list of `prices` is the same length as the list of `listings`, that's because these are (made-up) prices for each listing.

```{python}
listings = ["Sunny 1-Bed", "Fantastic Dbl", "Home-Away-From-Home", "Sunny Single", "Whole House", "Trendy Terrace"]
prices = [37.50, 46.00, 125.00, 45.00, 299.99, 175.00]
```

### Lateral Thinking

Given what you know about `listings` and `prices`, how do you print: 

```{python}
#| echo: false
#| output: asis
listing="Home-Away-From-Home"
print(f'> `"The nightly price for {listing} is £{prices[listings.index(listing)]}."`')
```

But you have to do this _without_ doing any of the following:

1. Using a list index directly (*i.e.* `listings[2]` and `prices[2]`) or 
2. Hard-coding the name of the listing? 

To put it another way, **neither** of these solutions is the answer:

```{python}
#| eval: False
print("The nightly price for `Home-Away-From-Home` is £" + str(prices[2]) + ".")
# ...OR...
listing=2
print("The nightly price for `Home-Away-From-Home` is £" + str(prices[listings[listing]]) + ".")
```

::: {.callout-tip}

You will need to combine some of the ideas above and also think about the fact that the list index is that we need is the same in both lists... Also, remember that you'll need to wrap a `str(...)` around your temperature to make it into a string.

:::

:::: {.qna}

#### Question

```{python}
#| eval: False
listing="Home-Away-From-Home" # Use this to get the solution...

# This way is perfectly fine
print("The nightly price of " + ?? + " is " + str(??))

# This way is more Python 3 and a bit easier to read
print(f"The nightly price of {??} is {??}")
```

#### Answer

```{python}
listing="Home-Away-From-Home" # Use this to get the solution...

# This way is perfectly fine
print("The nightly price of " + listing + " is " + str(prices[listings.index(listing)]))

# This way is more Python 3 and a bit easier to read
print(f"The nightly price of {listing} is {prices[listings.index(listing)]}")
```

::::

### Double-Checking Your Solution

```{python}
listing = 'Sunny Single'
```

You'll know that you got the 'right' answer to the question above if you can copy+paste your code and change only **one** thing in order to print out: "The nightly price of `{python} listing` is £`{python} prices[listings.index(listing)]`"

:::: {.qna}

#### Question

```{python}
#| eval: False
listing = 'Sunny Single'
print(??)
```

#### Answer

```{python}
listing = 'Sunny Single'
print(f"The nightly price of {listing} is £{prices[listings.index(listing)]}")
```

::::

### Loops 

Now use a `for` loop over the listings to print out the price of each. But first, some information about formatting number in Python... 

::: {.callout-tip}
#### Formatting Numbers

We often want to format numbers in a particular way to make the more readable. Commonly, in English we use commas for thousands separators and a full-stop for the decimal. Other countries follow other standards, but by default Python goes the English way. So:

```{python}
#| echo: True
print(f"{1234567.25:.0f}")
print(f"{1234567.25:.1f}")
print(f"{1234567.25:.2f}")
print(f"{1234567:.2f}")
print(f"{1234567:,.2f}")
```

You might like to read this [useful article](https://blog.teclado.com/python-formatting-numbers-for-printing/) on formatting numbers in Python.

:::

That should then help you with the output of the following block of code!

:::: {.qna}

#### Question

```{python}
#| eval: False
for l in listings:
    ??
```

The output should be:

```{python}
#| echo: false
#| output: asis
print("```default")
for l in listings:
    print(f"The nightly price of {l} is £{prices[listings.index(l)]:0.2f}")
print("```")
```

#### Answer

```{python}
for l in listings:
    print(f"The nightly price of {l} is £{prices[listings.index(l)]:0.2f}")
```

::::

# Dictionaries

::: {.callout-note}

#### Connections

This section draws on the [Dictionaries]({{< var module.web >}}sessions/week3.html#pre-recorded-lectures) lecture and Code Camp [Dictionaries]({{< var module.camp >}}lessons/Dicts.html) session.

:::

::: {.callout-tip collapse="true"}

#### Difficulty: Low.

:::

Remember that dictionaries (a.k.a. dicts) are like lists in that they are [data structures](https://docs.python.org/2/tutorial/datastructures.html) containing multiple elements. A key difference between [dictionaries](https://docs.python.org/2/tutorial/datastructures.html#dictionaries) and [lists](https://docs.python.org/2/tutorial/introduction.html#lists) is that while elements in lists are ordered, dicts (in most programming languages, though not Python) are unordered. This means that whereas for lists we use integers as indexes to access elements, in dictonaries we use 'keys' (which can multiple different types; strings, integers, etc.). Consequently, the important term here is key-value pairs. 

## Creating an Atlas

The code below creates an atlas using a dictionary. The dictionary `key` is a listing, and the `value` is the latitude, longitude, and price.

```{python}
#| echo: true
listings = {
    'Sunny 1-Bed': [37.77, -122.43, '£37.50'],
    'Fantastic Dbl': [51.51, -0.08, '£46.00'],
    'Home-Away-From-Home': [48.86, 2.29, '£125.00'],
    'Sunny Single': [39.92, 116.40 ,'£45.00'],
}
```

### Adding to a Dict 

Add a record to the dictionary for "Whole House" following the same format.

:::: {.qna}

#### Question

```{python}
#| eval: False
??
```

#### Answer

```{python}
listings['Whole House'] = [13.08, 80.28, '£299.99']
```

::::

### Accessing a Dict 

In *one* line of code, print out the price for 'Whole House':

:::: {.qna}

#### Question

```{python}
#| eval: False
??
```

#### Answer

```{python}
#| echo: true
print(f"The nightly price for Whole House is {listings['Whole House'][2]}")
```

::::

## Dealing With Errors

Check you understand the difference between the following two blocks of code by running them.

```{python}
#| eval: False
try:
    print(listings['Trendy Terrace'])
except KeyError as e:
    print("Error found")
    print(e)
```

```{python}
#| eval: False
try:
    print(listings.get('Trendy Terrace','Not Found'))
except KeyError as e:
    print("Error found")
    print(e)
```

Notice that trying to access a non-existent element of a dict triggers a `KeyError`, while asking the dict to `get` the _same element_ does not, it simply returns `None`. Can you think why, depending on the situtation, _either_ of these might be the 'correct' answer?

## Thinking Data

This section makes use of both the [Dictionaries]({{< var module.web >}}/sessions/week3.html#pre-recorded-lectures) lecture and the [DOLs to Data]({{< var module.web >}}sessions/week3.html#pre-recorded-lectures) lecture.

::: {.callout-tip}

In this section you'll need to look up (i.e. Google) and make use of a few new functions that apply to dictionaries: `<dictionary>.items()`, `<dictionary>.keys()`. *Remember*: if in doubt, add `print(...)` statements to see what is going on!

:::

### Iterating over a Dict 

Adapting the code below, print out the listing name and price.

:::: {.qna}

#### Question

```{python}
#| eval: False
for l in listings.keys():
    print(??)
```

The output should look something like this:
```{python}
#| echo: False
#| output: asis
print("```default")
for l in listings.keys():
    print(f"{l} -> {listings[l][2]}</code>")
print("```")
```

#### Answer

```{python}
for l in listings.keys():
    print(f"{l} -> {listings[l][2]}")
```

::::

### More Complex Dicts 

How would your code need to change to produce the _same output_ from this data structure:

```{python}
#| echo: true
listings = {
    'Sunny 1-Bed': {
        'lat': 37.77, 
        'lon': -122.43, 
        'price': '£37.50'},
    'Fantastic Dbl': {
        'lat': 51.51, 
        'lon': -0.08, 
        'price': '£46.00'},
    'Home-Away-From-Home': {
        'lat': 48.86, 
        'lon': 2.29, 
        'price': '£125.00'},
    'Sunny Single': {
        'lat': 39.92, 
        'lon': 116.40, 
        'price': '£45.00'},
}
```

:::: {.qna}

#### Question

So to print out the below for each listing it's...

```{python}
#| eval: False
for l in listings.keys():
    print(??)
```

Your output should be:

```{python}
#| echo: False
#| output: asis
print("```default")
for l in listings.keys():
    print(f"{l} -> {listings[l]['price']}")
print("```")
```

#### Answer

```{python}
for l in listings.keys():
    print(f"{l} -> {listings[l]['price']}")
```

::::

### More Dictionary Action! 

And how would it need to change to print out the name and latitude of every listing?

:::: {.qna}

#### Question

```{python}
#| eval: False
for l in listings.keys():
    print(??)
```

The output should be something like this:

```{python}
#| echo: false
#| output: asis
print("```default")
for l in listings.keys():
    print(f"{l} is at latitude {listings[l]['lat']}")
print("```")
```

#### Answer

```{python}
#| echo: true
for l in listings.keys():
    print(f"{l} is at latitude {listings[l]['lat']}")
```

::::

### And Another Way to Use a Dict 

Now produce the _same output_ using this new data structure:

```{python}
#| echo: true
listings_alt = [
    {'name':     'Sunny 1-Bed',
     'position': [37.77, -122.43],
     'price':    '£37.50'},
    {'name':     'Fantastic Dbl',
     'position': [51.51, -0.08],
     'price':    '£46.00'},
    {'name':     'Home-Away-From-Home',
     'position': [48.86, 2.29],
     'price':    '£125.00'},
    {'name':     'Sunny Single',
     'position': [39.92, 116.40],
     'price':    '£45.00'},
    {'name':     'Whole House', 
     'position': [13.08, 80.28],
     'price':    '£299.99'}
]
```

:::: {.qna}

#### Question

```{python}
#| eval: False
for l in listings_alt:
    print(??)
```

The output should be something like this:

```{python}
#| echo: False
#| output: asis
print("```default")
for l in listings_alt:
    print(f"{l['name']} is at latitude {l['position'][0]}")
print("```")
```

#### Answer

```{python}
#| echo: true
for l in listings_alt:
    print(f"{l['name']} is at latitude {l['position'][0]}")
```

::::

### Think Data! 

What are some of the main differences that you can think of between these data structures? There is no right answer.

- Point 1 here.
- Point 2 here.
- Point 3 here.

## Add to Git/GitHub

Now follow the same process that you used last week to ensure that your edited notebook is updated in Git and then synchronised with GitHub.
