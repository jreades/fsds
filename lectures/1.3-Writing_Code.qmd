---
author: "Jon Reades"
email: "j.reades@ucl.ac.uk"
title: "Writing Code"
other: ""
date-as-string: "1st October 2025"
format: revealjs
---

## Three Phases of Coding

1. Managing it
2. Documenting it
3. Writing it

Notice that writing comes *last*.

# Managing Code

::: {.notes}
Why can't we write code the same way that we write an essay?
:::

## Git

:::: {.columns}
::: {.column width="30%"}
![](./img/Git.png)
:::
::: {.column width="70%"}
Version control allows us to:

1. Track changes to files with a high level of detail using `commit`.
2. `push` these changes out to others.
3. `pull` down changes made by others.
4. `merge` and resolve conflicting changes.
5. Create a `tag` when a 'milestones' is reached.
6. Create a `branch` to add a feature.
7. Retrieve specific versions or branches with a `checkout`.

:::
::::

## GitHub

:::: {.columns}
::: {.column width="30%"}
![](./img/Octocat.png)
:::
::: {.column width="70%"}
Git is distributed, meaning that every computer is a potential server *and* a potential authority. **Result**: commits on a plane!

But how do people find and access your code if your 'server' is a home machine that goes to sleep at night? **Result**: GitHub.

GitHub is 'just' a very large Git server with a *lot* of nice web-friendly features tacked on: create a web site, issue/bug tracking, promote your project... 

:::
::::

## Git+GitHub is for... anything!

![](./img/i2p.png){height="500"}

::: {.notes}

This whole course (minus videos and assessments) is on GitHub.

:::

## Oh My Git!

{{< video https://ohmygit.org/assets/trailer.mov >}}

# Documenting Code

::: {.notes}
There is a lot more to documenting your code than just adding comments.
:::

---

:::: {.columns}
::: {.column width="30%"}
![](./img/Markdown.png)
:::
::: {.column width="70%"}
Markdown is intended to:

- Make it easy to write and format text (headings, tables, **bold**, *italics*...).
- Make it easy to embed rich media (video, images).
- Make it easy to take this simply-formatted text and turn it into something *useful* (a web site, journal article, documentation...).
:::
::::

## Additional Stylings

For those who know how to do it, you can also insert bits of real HTML and CSS (the 'languages' of web sites) as well.

<div style="border: dotted 2px red; padding: 25px; margin-top: 25px; background-color: rgb(230,230,230)">This content has HTML formatting attached.</div>

## Why Use It?

The features that make it easy to use have *real* advantages for *you*:

1. You will spend less time wrestling with Microsoft Word and its formatting; this means that...
2. You will spend more time focussing on the important stuff: writing and coding!
3. You will be able to combine Code and Documentation easily because Python/R and Markdown all coexist happily on GitHub.


## Markdown Examples {.smaller}

See [CommonMark](https://commonmark.org/help/) and the [Markdown Guide](https://www.markdownguide.org/basic-syntax/) for more :

<table style="border: solid 1px rgb(230,230,230)">
  <tr>
    <th>Format</th><th>Output</th>
  </tr><tr>
    <td>Plain text...</td><td>Plain text</td>
	</tr><tr>
  	<td>## A Large Heading</td><td><h2>A Large Heading</h2></td>
  </tr><tr>
  	<td>### A Medium Heading</td><td><h3>A Medium Heading</h3></td>
  </tr><tr>
  	<td>&#45; A list<br />&#45; More list</td><td><ul>
  		<li>A list</li>
  		<li>More list</li>
  	</ul></td>
  </tr><tr>
  	<td>1&#46; An ordered list<br />2&#46; More ordered list</td>
  	<td><ol>
      <li>An ordered list</li>
      <li>More ordered list</li>
    </ol></td>
  </tr><tr>
  	<td>&lsqb;A link&rsqb;(http://casa.ucl.ac.uk)</td><td><a href="http://casa.ucl.ac.uk">A link</a></td>
  </tr>
</table>

::: {.notes}
[This guide](https://www.toptal.com/designers/htmlarrows/punctuation/) is good for HTML entities, though Google will also give you them pretty easily if you type `HTML entity code for copyright`...
:::

---

<table style="border: solid 1px rgb(230,230,230)">
  <tr>
    <th>Format</th><th>Output</th>
  </tr><tr>
  	<td>!&lsqb;Alt Text&rsqb;(casa_logo.jpg)</td><td><img src="https://github.com/jreades/i2p/raw/master/img/casa_logo.jpg" width="150" /></td>
  </tr><tr>
  	<td>&#96;A code snippet&#96;</td><td>`A code snippet`</td>
  </tr><tr>
  	<td>&#96;&#96;&#96;python<br />
  	A block of Python code<br />
    &#96;&#96;&#96;
  	</td><td>
    ```
    A block of Python code
    ```
  	</td>
  </tr>
</table>

## More Markdown...


Here are some more resources:

- [Getting Started](https://www.markdownguide.org/getting-started/)
- [An online interactive tutorial](https://www.markdowntutorial.com)
- [Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)

And once you're ready to get 'serious', check out [this tutorial](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown) on *Sustainable Authorship in Plain Text using Pandoc and Markdown* from [The Programming  Historian](https://programminghistorian.org/en/lessons/)! That's what actually underpins Knitr and Quarto, but you can do so much more...

## Literate Programming

Ideally, we want to write code in ways that are '[literate](https://en.wikipedia.org/wiki/Literate_programming)'. 

> The best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly. A programmer is ideally an essayist who works with traditional aesthetic and literary forms as well as mathematical concepts, to communicate the way that an algorithm works and to convince a reader that the results will be correct.

> -- <cite>Donald Knuth, *[Selected Papers on Computer Science](https://www.goodreads.com/work/quotes/108081)*</cite>

## Key Tenets

What we want:

1. **Weaving**: the code and its documentation are together in one file.
2. **Tangling**: the code can be run directly from this file.

Why do we want this?


## Jupyter(Lab) & Notebooks

![](./img/Jupyter_and_Lab.png)

Modern Browser + Jupyter == Tangled, Woven code in (m)any languages

Including *maths*:

$$
f(a) = \frac{1}{2\pi i} \oint_{\gamma} \frac{f(z)}{z-a} dz
$$

::: {.notes}

*Note*: you can set equations in Markdown too!

:::

## JupyterLab + Python

![](./img/lab/Lab-Notebook-3.png)

## All Kinds of Features

JupyterLab is basically a web application:

:::: {.columns}
::: {.column width="33%"}
![](./img/lab/Lab-Interface.png){height="450"}
:::
::: {.column width="33%"}
![](./img/lab/Lab-Extensions.png){height="450"}
:::
::: {.column width="33%"}
![](./img/lab/Notebook-Structure.png){height="450"}
:::
::::

## JupyterLab Uses Markdown

![](./img/lab/Markdown-Formatted.png)

![](./img/lab/Markdown-Raw.png)


## And so Does Quarto


:::: {.columns}
::: {.column width="30%"}
![](./img/quarto.png)
:::
::: {.column width="70%"}
Quarto is intended to:

- Extend power of RMarkdown/`knitr` to *all* languages
- Make it easy to create web sites, documents, and articles.
- Make it easy to integrate code with text and images.
:::
::::

# > This whole course, including this presentation, was written in Quarto.

# Recap

1. With **Git + GitHub** we have a way to 'version' text, code, images, etc. and distribute them online via both a browser and the command line.
2. With **Markdown** we have a way to easily produce content (essays, documentation, web sites, presentations) and convert or distribute it via both a browser and the commenad line.
3. With JupyterLab and Quarto we have ways to write code and documentation in an '**woven**' manner.
4. But *all* of this is irrelevant if you can't **communicate** clearly.

Collectively, this constitutes [sustainable authorship](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown) of code and 'documentation' in the broadest sense.

## Additional Resources {.smaller}

- [The Myth of the 'Genius Programmer'](https://www.youtube.com/watch?v=0SARbwvhupQ) (by Google Devs)
- ["I mostly had one big, ugly, long, unreadable script"](https://politicalsciencereplication.wordpress.com/2013/08/14/i-mostly-had-one-big-ugly-long-un-readble-script/)
- [Stack Overflow](https://www.linkedin.com/learning/python-for-students/stack-overflow)
- [Version Control with Git](http://swcarpentry.github.io/git-novice)
- [Setting up and managing your GitHub user account](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account)
- [Personal Access Tokens on Git](https://docs.github.com/en/free-pro-team@latest/developers/apps/about-apps#personal-access-tokens)
- [Git Cheat Sheet](https://www.jrebel.com/blog/git-cheat-sheet)
- [The Most Undervalued Skill for Data Scientists](https://towardsdatascience.com/the-most-undervalued-skill-for-data-scientists-e0e0d7709321)
- [Finding your scientific story by writing backwards](https://link.springer.com/article/10.1007/s42995-021-00120-z)

# Thank You {background-image="/img/web/title-slide.png" background-color="#0F0C11" background-opacity="0.2"}

<h3>References</h3>