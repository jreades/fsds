---
author: "Jon Reades"
email: "j.reades@ucl.ac.uk"
title: "Object-Oriented Design"
other: ""
date-as-string: "1st October 2025"
format: revealjs
---

# Three Key Concepts for Classes

1. Encapsulation
2. Inheritance
3. Polymorphism

::: {.notes}
Encapsulation: the bundling of the data and the methods that work on that data in **one unit**; data is *often* accessed via **methods** and not directly. I don't need to care **how** something works, only **that** it works.

Inheritance: classes can **inherit** functionality from 'parents' and then **extend** this in useful ways. So `geopandas` extends `pandas`, and `movingpandas` extends `geopandas`!

Polymorphism: a 'child' class can ideally be used anywhere its parent class can be used because it only **extends** (*i.e.* adds) functionality and does *not* break parent behaviour. A class that implements functionality from multiple parents can be used anywhere those parents would be used.
:::

## Tree of Life

![](../img/Life.png)


## Tree of Vehicles

Most people would call this a class hierarchy or diagram.

![](../img/Vehicles.png)

There is **no natural order here**: where do e-bikes, unicycles, and rickshaws go?

::: {.notes}

Indeed, we could map out vehicles based on the number of axles, their source of power, their driver positioning, etc., etc. The point here is that the designer must make choices that are influenced by (and will influence) the design of the application for which this class hierarchy is buing developed. An automobile manufacturer might make *different* choices from a government trying to implement a tax policy.

:::


## Classes vs Packages

> Functionally, a class and a package are indistinguishable, but a _class_ produces objects that use methods and instance or class variables, whereas a _package_ is a group of functions and constants that may, or may not, include classes.

Ugh, now try to keep _this_ straight in your head.


## Key Takeaways

1. You’ve been using Classes and Methods since you started. 
2. You can ‘package up’ useful code into functions, and useful functions into packages.
3. Together, packages and classes will turbo-charge your programming skills.
4. You can stand on the shoulders of giants!


## Additional Resources {.smaller}

- [What is object-oriented programming?](https://www.linkedin.com/learning/python-quick-start/what-is-object-oriented-programming)
- [Python object-oriented programming](https://www.linkedin.com/learning/python-object-oriented-programming/python-object-oriented-programming)
- [Object-oriented programming refresher](https://www.linkedin.com/learning/python-object-oriented-programming/object-oriented-programming-refresher)
- [Understanding inheritance](https://www.linkedin.com/learning/python-object-oriented-programming/understanding-inheritance)
- [Abstract base classes](https://www.linkedin.com/learning/python-object-oriented-programming/abstract-base-classes)
- [Python - Object-Oriented](https://www.tutorialspoint.com/python/python_classes_objects.htm)

# Thank You {background-image="/img/web/title-slide.png" background-color="#f7eff5" background-opacity="0.2"}

<h3>References</h3>