---
author: "Jon Reades"
email: "j.reades@ucl.ac.uk"
title: "Getting Started"
other: ""
date-as-string: "1st October 2025"
format: revealjs
---

# [{{< var module.web-short >}}]({{< var module.web >}})

# Key information to get you started...

::: {.notes}
This presentation contains key contact and delivery information about the module.
:::

+:------------------------+:--------------------------+
| **Module Lead**         |  **Contact**              |
+=========================+===========================+
| Prof. Jon Reades        |  j.reades[at]ucl.ac.uk    |
| Dr. Fulvio Lopane       |  f.lopane[at]ucl.ac.uk    |
|                         |  Slack                    |
+-------------------------+---------------------------+
| **PGTAs**               |                           |
+-------------------------+---------------------------+
|  Leo Gao,               |  Slack                    |
|  Adam Zhou,             |                           |
|  Francesco Terenzi      |                           |
+-------------------------+---------------------------+

## Who We Are?

<blockquote style="margin-top:250px;">A few fun facts about your module leads...</blockquote>

::: {.notes}
Jon:

- Has a first degree in literature.
- Has never studied computer science and has only ever taken night classes in programming.
- Worked for a dot.com start-up in New York before transferring to London.
- Has taught undergraduate geography at King's, from which this module evolved, and has taught this module for five years.
- When not working on teaching, being head of department, and squeezing in some reseach, Jon can be found looking after his two young daughters, mountain biking with Andy or hiking in Scotland.

Fulvio:

- As a child wanted to be a geographer, but something went wrong and ended up being an engineer.
- He learned informatics without a computer, but writing code with paper and pen.
- Designed seismic adjustments to power plants before dedicating to spatial data science.
- Did a PhD in Multi-Objective Spatial Optimisation.
- When not at CASA, Fulvio can be found nerding out with anthropology or history books, old maps, or -on weekends- football matches.

- 

:::

## Information

*Foundations* is distributed across *two* web sites:

1. The micro-site: [{{< var module.web-short >}}]({{< var module.web >}}) -- lectures, practicals, readings, and information about the assessments.
2. Moodle: [{{< var module.moodle-short >}}]({{< var module.moodle >}}) -- recorded sessions, booking drop-in hours, group messaging, 'answer sheets', and submission of assessments, as well as other formal  components.

## Where Does FSDS Fit? {.smaller}

:::: {.columns}

::: {.column width="50%"}
**Geographic Information Systems (GIS)**

- Foundations of spatial analysis
- Working with geo-data

**Quantitative Methods (QM)**

- Foundations of statistical analysis
- Working with data
:::

::: {.column width="50%"}
**Foundations of Spatial Data Science (FSDS)**

- Foundations of *applied* spatial and statistical analysis
- Integrating and applying concepts from GIS & QM to a _problem_
- Developing programming and practical analysis skills
- Seeing the 'data science' pipeline from end to end
:::

::::

## What Are We Trying to Do?

This class hopes to achieve four things:

1. To teach you the basics of how to *code* in Python.
2. To teach you the basics of how to *think* in Python.
3. To teach you how to engage with data *critically*.
4. To help you *integrate* concepts taught across Term 1 and prepare you to *apply* them in Term 2.

These skills are intended to be transferrable to post-degree employment or research.

## Overall Structure

- **Part 1: Foundations**: Weeks 1--5 to cover the 'basics' and set out a data science workflow.
- **Part 2: Data**: Weeks 6--10 look at the same data through three lenses. 
- **Part 3: Bonus**: Weeks 11--12 additional content *if* you want it.

::: {.notes}

**1-5** means tackling the 'basics' of Python, foundational concepts in programming, and practicing with the 'tools of the trade' for programmers.

**6-10** means different *types* of data (numeric, spatial and textual) with a view to understanding how such data can be cleaned, processed, and aggregated for use in a subsequent analysis. It is commonly held that 80% of 'data science' involves data *cleaning*, so this is a critical phase in developing an *understanding* of data. We also look at selection and visualisation.

**11-12** is about classification, dimensionality reduction, and clustering. These concepts will have been encountered in other modules, so the intention is that the student will see how these fit into the 'bigger picture' of applied spatial analysis.

:::

## Week-to-Week

The specific activities for each week can be found on the microsite: [jreades.github.io/fsds/](https://jreades.github.io/fsds/). These include:

- **Preparation**: readings, pre-recorded lectures, quizzes/feedback.
- **In-Person**: discussing readings and lectures; responding to assessment requirements; discussing issues arising from the previous week's practical, and some 'live coding'.
- **Practicals**: working through a weekly 'programming notebook' with support from your PGTAs.

::: {.callout-tip}

### Bring Your Computer

Please remember to bring your own computer to the practical sessions! The tools we use are *not* installed on cluster systems.

:::

## Assessments

- **Timed, Open Book Exam** ({{< var assess.quiz-weight >}} of module grade): A quiz requiring a mix of numeric and textual answers to short data analysis questions for which you must write the code.
- **Group Report** ({{< var assess.group-weight >}} of module grade; 2,500 words max): A structured, small-group submission in which students respond to set questions and develop an exploratory analysis of the assigned data set.
- **Self-Evaluation** ({{< var assess.peer-weight >}} of module grade): A structured individual reflection combined with numerical scoring of peers on their contribution to the group's outcomes.

::: {.notes}

Assessment logic:

- Teach and test the most challenging aspects of data science 'work' *without* mastery of Python. 
- Discover transferrability of skills and tools across projects, disciplines, and industries.
- Build on content from QM (*e.g.* setting quantitative research questions) and GIS (*e.g.* spatial statistics).
- Develop experience with non-academic research formats and writing.

So, 

1. Is a Moodule quiz due {{< var assess.quiz-date >}} (after Reading Week) and it will focus on the effective use of the pandas library.
2. Is a Quarto document due {{< var assess.group-date >}} (immediately after the end of term) that combines the analysis and outputs in one document with a set of specified questions upon which randomly-selected groups will receive feedback throughout the term. 
3. Is a reflection and ranking exercise due {{< var assess.peer-date >}} (the day after the Quarto submission). 

We will talk more about these over the course of the term.

:::

# How to 'Ace' the Assessments?

# >  *Study* like you're learning a new language. *Do* the readings. *Talk* to other students (especially in your group). *Ask* for help when you need it!

::: {.notes}

More on how to ask for help below!

:::

## Consequences...

So... 

- If you only code during the practical session then you will *not* learn how to code. 
- If you cram the night before then you will *not* learn how to code.
- If you practice for 45 minutes a day then you *will* learn how to code.

Don't take my word for it, @prat:2020 in *Nature* link language learning to programming language learning!

::: {.notes}

This said, we do hope to convince you that:

- Anyone---and this includes **you**---can code. 
- Learning to code does *not* require mathematical ability.
- Learning to code does *not* require linguistic ability.
- Learning to code *does* require practice. And more practice. And more again.

:::

## Actual Feedback...

> I was really struggling with the concepts of lists, dictionaries and iterations (I basically could not do any of Practical 3 without panicking) and I was telling <student> that it felt like Workshop 3 was all in a foreign language - I was so lost. 
>
> But both yesterday and today, I have been over all the content, recordings and even code camp again and I've just had a penny drop moment, I could cry woohooo!!!!!! 
>
> I really appreciate all the effort you’ve put into recording the concepts ahead of lectures and the way you’ve structured the module, although it is very fast-moving you have provided all the resources for us to do well.

## More Feedback

> I just wanted to update you on my progress. Since flipping the content round following your advice, I have been feeling much much better. I followed what you were doing in the workshop and also have completed the practical in about half the time than I usually do. Thanks so much for responding and for your effort with this module.

## The (Old) Challenges

- Different style of learning from what you might be used to (“I didn't anticipate, or rather factor into my schedule, the amount of out-of-hours practice that was required to stay up to date.”).
- Doing stats *and* programming *at the same time* and connecting this all back to the bigger picture.
- Delayed gratification (you have to walk before you can run).
- Easy to fall behind, but hard to catch up (“the pace is relentless”).

## The (New) Challenges

- ChatGPT (you're going to learn when *not* to trust it)
- Close reading 101 (you're going to be asked to *really* read)
- Public speaking (yes, you're going to have do a bit of this too)

::: {.notes}

This is a new one for us too. We don't want to pretend that ChatGPT doesn't exist. It's how you will do your work. Unquestionably. But it is also a trap. This year we're hoping to show you that.

:::

## The Rewards

- Skills that are highly transferrable and highly sought-after professionally.
- Problem-solving and practical skills that are valued by the private and public sectors.
- A whole new way of seeing the world and interacting with it.
- Lots of support along the way… *if you remember to ask for it!*

See [this thread](https://twitter.com/fossilosophy/status/1342871356254334977?s=21) on moving from academia to data science.

# Getting Help

## Lots of Help 'Out There'

You will learn cope *best* if you treat this like learning a new language:

- Start simple and work up.
- Google is your friend (really).
- Talk with your friends (*i.e.* in-person or on Slack).
- Immerse yourself and practice regularly.
- Print out the readings and annotate them.
- Subscribe to a ‘magazine’ or two (*e.g.* Medium or Pocket).
- Learn how to ask questions (*i.e.* Search Stack Overflow).

## Study Aids

When you need an answer *right now*:

- [Google](https://www.google.co.uk) 
- [Stack Overflow](https://stackoverflow.com/questions/tagged/python)
- [Slack](https://casa-students-2020.slack.com/)

When you want to *learn more*: 

- [Medium](https://medium.com/search?q=python)
- [Pocket](https://app.getpocket.com/search/python)

::: {.notes}

Google will become more useful as you learn more and this is definitely one class in which "I Googled it" is a *good* answer.

As of early September 2020, Stack Overflow contains over 1.5 *million* Python questions alone! Chances are someone else has had your question before.

:::

## *Before* You Ask for Help


From the [Computer Science Wiki](https://computersciencewiki.org/index.php/How_to_ask_for_help):

- Draw a picture of the problem
- Explain the problem to a rubber duck, teddy bear or whatever (really!)
- Forget about a computer; how would you solve this with a pencil and paper?
- Think out loud
- Explain the problem to a friend

To which we would add:

- Use `print(variable)` statements liberally in your code!

::: {.notes}

We'll cover this last bit as we get more used to coding!

:::

## *Where* to Ask for Help

There is *no* shame in asking for help. None. We are here to support your learning and we have chosen a range of tools to support that:

- [**Slack**]({{< var module.slack >}}): use public `#fsds` channel for help with coding, practical, and related course questions.
- **Drop-in Hours**: use [Booking Form](https://outlook-sdf.office.com/bookwithme/user/056224a5314e48a8ae9805186115b859@ucl.ac.uk?anonymous&ep=plink)
- **Out-of-Hours**: use email to raise personal circumstances and related issues for focussed support. 
- **Emergencies**: contact Professional Services for support as-needed to preserve privacy.

::: {.notes}

We'll talk about Slack more [later](./1.2-Tools_of_the_Trade.qmd), but we think that this is the best way to get help when you need it. Slack enables us to support you as a community of learners across computer / tablet / phone.

I've tried to throw together some _ideas_ on [how you can study effectively](https://jreades.github.io/sds_env/skills/attention.html) that covers things relating to managing distractions when you've only got limited time, as well as [how to read](https://jreades.github.io/sds_env/skills/reading.html) and [how to think](https://jreades.github.io/sds_env/skills/thinking.html). 

:::

## *When* to Ask for Help


- When you get warning messages from your computer's Operating System.
- When you cannot get the coding environment to run _at all_.
- When even simple commands return line after line of error code.
- When you have no clue what is going on or why.
- When you have been wrestling with a coding question for more than 20 minutes (but see: [*How* to Ask for Help](https://jreades.github.io/sds_env/skills/help.html)!)

::: {.notes}

In order to learn you *do* need to struggle, but only up to a point! So we don't think that *giving* you the answer to a coding question as soon as you get stuck is a good way for you to learn. At the same time, I remain sad to this day that one of the most insightful students I've ever taught in a lecture context dropped out of our module because they were having trouble with their computer and thought it was *their* fault nothing was working right. By we had realised what was going on it was too late: they were so far behind that they didn't feel able to catch up. We'd *rather* that you asked and we said “Close, but try it again" than you didn't ask and checked out thinking that you couldn't 'do' programming.

:::

## *How* to Ask for Help

In addition to [what we have provided](https://jreades.github.io/sds_env/skills/help.html), we like the "How to ask programming questions" page provided [by ProPublica](https://www.propublica.org/nerds/how-to-ask-programming-questions):

1. Do some research first.
2. Be specific.
3. Repeat.
4. Document and share.

If you find yourself wanting to ask a question on Stack Exchange then they also [have a guide](https://codereview.stackexchange.com/help/how-to-ask), and there are [plenty](https://codingkilledthecat.wordpress.com/2012/06/26/how-to-ask-for-programming-help/) of [checklists](https://medium.com/better-programming/the-smarter-way-of-asking-for-programming-help-52cd140dc437).

::: {.notes}

There's also useful ideas on [how to get help](https://jreades.github.io/sds_env/skills/help.html) that covers things like 'how to get a reply from your Prof' and 'where to look for help'.

:::


## Learn from Your Mistakes


![](./img/Learning_from_Mistakes.png)


## One More Thing...


You will get things wrong. We will get things wrong. 

We will assume that you are trying your best. Please assume the same about us!

It's going to be messy, but we're *really* excited about it!


## And Finally...

::: {.callout-warning}

### Auto-Updates

Do **not** allow your computer to auto-update during term. Inevitably, major upgrades will break developer tools. Do this by choice *only* when you have time. MacOS Sonoma is out **26 September**, do *not* install it!

::: 

::: {.notes}

Many students allowed their computer to update to Big Sur last year and it broke their entire computing environment. Some did this shortly before a submission was due. Do *not* do this!

:::

## Additional Resources {.smaller}

- See the [GIS&T Body of Knowledge (BoK)](https://gistbok.ucgis.org/all-topics?term_node_tid_depth=97) for quick overviews of concepts, techniques, and tools.
- To distinguish between plagiarism and paraphrasing [here's a nice tutorial](https://libguides.sjsu.edu/plagiarism/home-page) that you can also use to help you with your 'regular' writing.
- Mindless copy+pasting of [Stack Overflow](https://stackoverflow.com) code leads to sphagetti and, often, incorrect results or difficult-to-squash bugs. Think of it like paraphrasing.

# Thank You {background-image="/img/web/title-slide.png" background-color="#0F0C11" background-opacity="0.2"}

<h3>References</h3>