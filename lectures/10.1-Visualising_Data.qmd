---
author: "Jon Reades"
email: "j.reades@ucl.ac.uk"
title: "Visualising Data"
other: ""
date-as-string: "1st October 2025"
format: revealjs
---

## Start with Chart (Part 2)

Building on [Week 7](./7.3-EDA.qmd), here are some deeper links between models and visualistions:

- What are we trying to model?
- What are we trying to penalise?
- What isn't fitting into the model?

::: {.notes}
Inspired by this: https://towardsdatascience.com/when-averages-lie-moving-beyond-single-point-predictions-23201e8c04c8/

Link it to the following kinds of issues:

- 
:::

## What are We Modelling?

::: {.notes}

Issues of skew and leverage. It's not (so much) about normality *per se* with OLS.

:::

## What are We Penalising?


## What isn't Fitting?


## Choices, Choices...

1. **[`matplotlib`](https://matplotlib.org)**: the 'big beast' of visualisation in Python. Similar to MATLAB. Highly customisable. Very complex.
2. **[`seaborn`](https://seaborn.pydata.org)**: a layer that sits over top of [`matplotlib`](https://matplotlib.org) and makes it easier to produce good-quality graphics.
3. **[`bokeh`](https://docs.bokeh.org/en/latest/)**: web-based visualisation tool that can integrate with Jupyter or output to static HTML files.
4. **[`plotly`](https://plotly.com)**: another web-based visualisation tool that can integrate with Jupyter.

More emerging all the time: [`Vega`](https://vega.github.io/vega/)/[`Altair`](https://altair-viz.github.io), [`HoloViews`](https://holoviews.org), etc.

::: {.aside}

If you're really wedded to `ggplot`, [`plotnine`](https://plotnine.readthedocs.io/en/stable/) is a clone of ggplot's interface (Grammer of Graphics) in Python. A [brief overview](https://mode.com/blog/python-data-visualization-libraries/) of visualisation libraries could be helpful.

:::

## Seaborn

Designed to provide ggplot-*like* quality output using matplotlib:

- Improve on default colourmaps and colour defaults.
- Integration with pandas data frames (*Note: not geopandas!*).
- Offers more plot types out of the box.
- Still offers access to matplotlib's back-end.


## Plot Types

![Partial Overview of Seaborn Plots](https://seaborn.pydata.org/_images/function_overview_8_0.png)

::: {.aside}

For the fuller overview see [Overview of seaborn plotting functions](https://seaborn.pydata.org/tutorial/function_overview.html?highlight=function%20overview) and the [full API reference](https://seaborn.pydata.org/api.html).

:::

## In Practice {.smaller}

```python
import seaborn as sns
sns.set_theme(style="darkgrid")
fmri = sns.load_dataset("fmri")
sns.lineplot(x="timepoint", y="signal",
             hue="region", style="event",
             data=fmri)
```

![](https://seaborn.pydata.org/_images/errorband_lineplots.png)


## In Practice 2 {.smaller}

```python
sns.set_theme(style="whitegrid", palette="muted")
df = sns.load_dataset("penguins")

ax = sns.swarmplot(data=df, x="body_mass_g", y="sex", hue="species")
ax.set(ylabel="")
```

![](https://seaborn.pydata.org/_images/scatterplot_categorical.png)


## Configuring Seaborn {.smaller}

Seaborn 'themes' act as shortcuts for setting multiple matplotlib parameters:

| Seaborn Command | Accomplishes |
| --------------- | ------------ |
| [`set_theme(...)`](https://seaborn.pydata.org/generated/seaborn.set_theme.html#seaborn.set_theme) | Set multiple theme parameters in one step. |
| [`axes_style(...)`](https://seaborn.pydata.org/generated/seaborn.axes_style.html#seaborn.axes_style) | Return a parameter dict for the aesthetic style of the plots. |
| [`set_style(...)`](https://seaborn.pydata.org/generated/seaborn.set_style.html#seaborn.set_style) | Set the aesthetic style of the plots. |
| [`plotting_context(...)`](https://seaborn.pydata.org/generated/seaborn.plotting_context.html#seaborn.plotting_context) | Return a parameter dict to scale elements of the figure. |
| [`set_context(...)`](https://seaborn.pydata.org/generated/seaborn.set_context.html#seaborn.set_context) | Set the plotting context parameters. |

You can also access:

- [Palettes](https://seaborn.pydata.org/tutorial/color_palettes.html): colormaps can be generated using `sns.color_palette(...)` and set using `sns.set_palette(...)`.
- [Axes Styles](https://seaborn.pydata.org/generated/seaborn.axes_style.html#seaborn.axes_style): includes `darkgrid`, `whitegrid`, `dark`, `white`, `ticks`.


## Anatomy of a Figure

![](https://matplotlib.org/_images/sphx_glr_anatomy_001.png){.r-stretch}

[Source](https://matplotlib.org/gallery/showcase/anatomy.html#anatomy-of-a-figure).

## Writing a Figure

There are *multiple* ways to access/write elements of a plot:

- **Figure**: high-level features (*e.g.* title, padding, etc.). Can be accessed via `plt.gcf()` (**g**et **c**urrent **f**igure) or upon creation (e.g. `f, ax = plt.subplots(1,1)` or `f = plt.figure()`).
- **Axes**: axis-level features (e.g. labels, tics, spines, limits, etc.). Can be accessed via `plt.gca()` (**g**et **c**urrent **a**xes) or upon creation (e.g. `f, ax = plt.subplots(1,1)` or `ax = f.add_subplot(1,1,1)`).

Annotations, artists, and other features are *typically* written into the axes *using the coordinate space of the figure* (e.g. decimal degrees for lat/long, metres for BNG, etc.).


## Adding a 3rd Dimension {.smaller}

This 'feature' is less well-developed but *does* work:

```python
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax  = plt.axes(projection='3d')
# OR
fig = plt.figure()
ax  = fig.add_subplot(111, projection='3d')
# THEN
ax.contour3D(X, Y, Z, ...)
ax.plot_surface(x, y, z, ...)
ax.plot3D(xline, yline, zline, ...)
ax.scatter3D(x, y, z, ...)
# ax.plot_surface and ax.plot_wire also give you 3D renderings
```

You can then set the elevation and azimuth using: `ax.view_init(<elevation>, <azimuth>)`.


## Saving Outputs {.smaller}

Straightforward via [save figure](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.savefig.html) function, but lots of options!

```python
plt.savefig(fname, dpi=None, facecolor='w', edgecolor='w',
    orientation='portrait', papertype=None, format=None,
    transparent=False, bbox_inches=None, pad_inches=0.1,
    frameon=None, metadata=None)
```

The format can be largely determined by the file extension in the `fname` (file name) and the supported formats depends on what you've installed! You can find out what's available to you using: `plt.gcf().canvas.get_supported_filetypes()`. 

## Jupyter

By default, Jupyter's output is static matplotlib, but we can extend this in three ways:

1. Make the static plot zoomable and pannable using `%matplotlib widget` (declare this at the top of your notebook).
2. Make the plot more directly interactive using `ipywidgets` (import `interact` and related libs as needed).
3. Use a browser-based visualisation tool such as `bokeh`, `plotly`, `altair`/`vega`, `holoviews`, or even `d3` (format may be very, very different from what you are 'used to' in Python).


## Widgets {.smaller}

```python
%matplotlib widget
rs = gpd.sjoin(gdf, hackney, how='left', op='within')
rs.NAME.fillna('None', inplace=True)
ax = hackney.plot(edgecolor='k', facecolor='none')
rs.plot(ax=ax, column='NAME', legend=True)
```

![](img/Matplotlib_Widget.png)


## Interact() {.smaller}

Taking an example from [Dani's work](https://darribas.org/gds_course/content/bH/lab_H.html#advanced-plotting):

```python
from ipywidgets import interact
# Alternatives: interactive, fixed, interact_manual
interact(
    <function>, # Function to make interactive
    <param0>,   # e.g. Data to use
    <param1>,   # e.g. Range start/end/step
    <param2>    # e.g. Fixed value
);
```


## Bokeh

![](./img/Bokeh.png)


## Automation {.smaller}

Plots built on top of matploblib can, to some extent, be automated using functions. For example, to draw circles and place text:

```python
def circle(ax, x, y, radius=0.15):
    from matplotlib.patches import Circle
    from matplotlib.patheffects import withStroke
    circle = Circle((x, y), radius, clip_on=False, zorder=10, 
                    linewidth=1, edgecolor='black', 
                    facecolor=(0, 0, 0, .0125),
                    path_effects=[withStroke(linewidth=5, 
                                  foreground='w')])
    ax.add_artist(circle)

def text(ax, x, y, text):
    ax.text(x, y, text, backgroundcolor="white",
         ha='center', va='top', weight='bold', color='blue')
```

## Don't Underestimate Text!

Label directly^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)]:

![](./img/datawrapper-1.avif){width="75%"}

## Don't Underestimate Text!

Repeat measurement units^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)] ^[Interestingly, this flies in the face of the 'chart junk minimisation' of @tufte:1983]:

![](./img/datawrapper-2.avif){width="75%"}

## Don't Underestimate Text!

Put the axes where they're needed^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)]:

![](./img/datawrapper-3.avif){width="75%"}

## Don't Underestimate Text!

Emphasise and explain with annotation^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)]:

![](./img/datawrapper-4.avif){width="75%"}

## Don't Underestimate Text!

Lead the eye with font sizes, styles, and colors^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)] ^[Just not too many of them in too many different styles!]:

![](./img/datawrapper-5.webp){width="55%"}

## Don't Underestimate Text!

See what I said on the previous slide about 'too much going on'^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)]:

![](./img/datawrapper-6.avif){width="75%"}

## Don't Underestimate Text!

For the sake of all that is holy, please don't **center-align text**^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)]:

![](./img/datawrapper-7.avif){width="75%"}

## Don't Underestimate Text!

Make reading easy and interpretation intuitive^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)] ^[Your readers don't need to legal names for each country, nor do they like akward hypens.]:

![](./img/datawrapper-8.avif){width="75%"}

## Don't Underestimate Text!

Use outlines to allow overlaps^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)] ^[Notice how this supports the focus and interpretation.]:

![](./img/datawrapper-9.avif){width="75%"}

## Don't Underestimate Text!

Get to the **point** in a way that works for the reader^[Shamelssly taken from [Datawrapper](https://blog.datawrapper.de/text-in-data-visualizations/)] ^[Rephrase for legibility and intelligibility.]:

![](./img/datawrapper-10.avif){width="75%"}

## Additional Resources {.smaller}

:::: {.columns}
::: {.column width="50%"}
- [Matplotlib Cheatsheets](https://github.com/matplotlib/cheatsheets)
- [Introduction to PyPlot](https://matplotlib.org/3.1.0/tutorials/introductory/pyplot.html) (includes lots of parameter information)
- [Visualisation with Seaborn](https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html)
- [Seaborn Tutorial](https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.htmlhttps://seaborn.pydata.org/tutorial.htmlhttps://elitedatascience.com/python-seaborn-tutorialhttps://www.datacamp.com/community/tutorials/seaborn-python-tutorial)
- [Elite Data Science Seaborn Tutorial](https://elitedatascience.com/python-seaborn-tutorial)
- [Datacamp Seaborn Tutorial](https://www.datacamp.com/community/tutorials/seaborn-python-tutorial)
- [Three-Dimensional Plotting in Matplotlib](https://jakevdp.github.io/PythonDataScienceHandbook/04.12-three-dimensional-plotting.html)
- [An easy introduction to 3D plotting with Matplotlib](https://towardsdatascience.com/an-easy-introduction-to-3d-plotting-with-matplotlib-801561999725)
:::
::: {.column width="50%"}
- [DataWrapper Blog](https://www.datawrapper.de/blog)
- [Using text effectively in data viz](https://www.datawrapper.de/blog/text-in-data-visualizations)
- [Choosing fonts for charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/)
- [Bokeh Gallery](https://docs.bokeh.org/en/latest/docs/gallery.html#gallery)
- [Bokeh User Guide](https://docs.bokeh.org/en/latest/docs/user_guide.html#userguide)
- [Programming Historian: Visualizing Data with Bokeh and Pandas](https://programminghistorian.org/en/lessons/visualizing-with-bokeh)
- [Real Python: Data Viz with Bokeh](https://realpython.com/python-data-visualization-bokeh/)
- [Data Viz with Bokeh (Pt. 1)](https://towardsdatascience.com/data-visualization-with-bokeh-in-python-part-one-getting-started-a11655a467d4)
- [Using Interact](https://ipywidgets.readthedocs.io/en/latest/examples/Using%20Interact.html#)
- [Text in Data Visualizations](https://blog.datawrapper.de/text-in-data-visualizations/)

:::
::::

# Thank You {background-image="/img/web/title-slide.png" background-color="#0F0C11" background-opacity="0.2"}

<h3>References</h3>