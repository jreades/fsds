---
author: "Jon Reades"
email: "j.reades@ucl.ac.uk"
title: "Patterns in Text"
other: ""
date-as-string: "1st October 2025"
format: revealjs
---

## Can We Describe Text?

Consider the following character sequences:

- foo@bar.com
- https://www.ucl.ac.uk/bartlett/casa/
- \(555\) 102-1111
- E17 5RS
- Now, fair Hippolyta, our nuptial hour / Draws on apace. Four happy days bring in / Another moon. But, oh, methinks how slow / This old moon wanes. She lingers my desires, / Like to a stepdame or a dowager / Long withering out a young man’s revenue. (I.i.) 

::: {.notes}
We need ways to distinguish: Upper and Lower Case, Digits, Space Characters, Other Characters, Repetition, Type... Can you do those with strings alone?
:::

## String Methods are _Not_ Enough

```{python}
print(f"Index: {'123foo456'.index('foo')}")
print(f"Split: {'123foo456'.split('foo')}") 
print(f"Strip: {' 123 foo 456 '.strip()}") 
print(f"Lower: {'HOW NOW BROWN COW?'.lower()}")
print(f"Replace: {'How now brown cow?'.replace('brown ','green-')}")
```

See: `dir(str)` for full list of string methods.


## Regular Expressions

Regexes are a way for talking _about_ patterns observed in text, although their origins are rooted in philosophy and linguistics.

Implemented in Python as:

```{python}
import re
s = '123foo456'

# re.search(<regex>, <str>)
if re.search('123',s):
  print("Found a match.")
else:
  print("No match.")
```

## Capturing Matches

For singular matches it's fairly straightforward:

```{python}
print(f"String: {s}")
m = re.search('123',s)

print(f"Start of match: {m.start()}")
print(f"End of match: {m.end()}")
print(f"Span of match: {m.span()}")
print(f"Match group: {m.group()}")
```

::: {.aside}
The match group is often more complicated than this because of 'memoisation'.
:::

::: {.notes}

So, we have `None` if a search fails, but if it succeeds then we have attributes of the `match` objection like start, end, span, and group (this last is going to be particularly interesting since it tells us what matched).

:::

## Configuring Matches

```{python}
s = '123foo456'

m = re.search('FOO',s)
print(f"First search: {m}")

m = re.search('FOO',s,re.IGNORECASE)
print(f"Second search: {m}")
```

The third parameter allows us to: match newlines (`re.DOTALL`), ignore case (`re.IGNORECASE`), take language into account (`re.LOCALE`), match across lines (`re.MULTILINE`), and write patterns across multiple lines (`re.VERBOSE`). If you need multiple options it's `re.DOTALL | re.IGNORECASE`. Bitwise again!


## More Than One Match

```{python}
s = '123foo456foo789'

lst1 = re.findall('foo',s)
print(f"Match list: {lst1}")

lst2 = re.finditer('foo',s)
print(f"List iterator: {[x for x in lst2]}")

rs  = re.sub('foo',' ',s)
print(f"Substitution: {rs}")

rs  = re.split(' ',rs)
print(f"Splitting: {rs}")
```

# Let's Get Meta

## Regular Expressions Do *Much* More

```{python}
s = "'That will be $1,000,000, he said...'"
m = re.search(r'\$((\d+,){2,}\d+)',s)
		
print(m.group(1))
```

It breaks down like this:

```{python}
# Look for a literal '$'
print(re.search(r'\$',s))
# Group of >=1 digits followed by a comma...
print(re.search(r'(\d+,)',s))
# Repeated two or more times...
print(re.search(r'(\d+,){2,}',s))
```

::: {.aside}
Also notice the `r'<regex>'` with an *r* in front of the string. This means 'raw' and is often a required modifier for regular expression patterns. Simple ones don't need it, but from here on out you will.
:::

## Character Classes {.smaller}

| Characters | Regex Meta Class Options | 'Antonyms' |
| :------------------ | :----------------------- | :----- |
| a...z      | `[a-z]`, `\w` (word-like characters)  | `[^a-z]`, `\W` |
| A...Z      | `[A-Z]`, `\w` (word-like characters)  | `[^A-Z]`, `\W` |
| 0...9      | `[0-9]`, `\d` (digits)                | `[^0-9]`, `\D` |
| `' '`, `\n`, `\t`, `\r`, `\f`, `\v`   | `\s`  | `\S` |
| `.`, `[`, `]`, `+`, `$`, `^`, `\|`, `{`, `}`, `*`, `(`, `)`, `?` | For safety always precede character with a `\`. | None  |

::: {.aside} 
`\w` will include `_`. And `\` is, once again, important as it 'escapes' various characters, and options.
:::


## Metacharacters {.smaller}

| Metacharacter | Meaning                     | Example |
| ------ | ---------------------------------- | ------- |
| .      | Any character at all                    | `c.t`      |
| ^      | Start of a string/line                  | `^start`   |
| $      | End of a string/line                    | `end$`     |
| *      | 0 or more of something                  | `-*`       |
| +      | 1 or more of something                  | `-+`       |
| ?      | 0 or 1 of something; also lazy modifier | `,?`       |
| {m,n}  | Repeat between *m* and *n* times        | `\d{1,4}`  |
| [ ]    | A set of character literals             | `[1-5]`    |
| ( )    | Group/remember this sequence of characters | `(\d+)` |
| \|     | Or                                      | `(A|B)`    |


# I am Completely Lost

::: {.notes}

Let's take some real regexes and try to make sense of them.

:::

## Building Blocks {.smaller}


| Regex               | Interpretation                                               |
| ------------------- | ------------------------------------------------------------ |
| `r'\s*'`            | 0 or more spaces                                             |
| `r'\d+'`            | 1 or more digits                                             |
| `r'[A-Fa-f0-7]{5}'` | Exactly 5 hexadecimal 'digits'                               |
| `r'\w+\.\d{2,}'`    | 1 or more 'wordish' characters, followed by a full-stop, then 2 or more digits |
| `r'^[^@]+@\w+'`     | One more non-@ characters at the start of a line, followed by a '@' then 1 or more 'wordish' characters. |
| `r'(uk|eu|fr)$'`    | The characters 'uk' or 'eu' or 'fr' at the end of a line.    |

## Exploring

Regex101 *might* be a fun way to learn:

<iframe width="800" height="500" src="https://regexle.com" title="Regexle"></iframe>

## What's This?

`re.VERBOSE` to the rescue:

```python
regex = r"""
([GIR] 0[A]{2})| 	# Girobank 
(
  (
    ([A-Z][0-9]{1,2})| # e.g A00...Z99
      (
        ([A-Z][A-HJ-Y][0-9]{1,2})|  # e.g. AB54...ZX11
          (([A-Z][0-9][A-Z])|  # e.g. A0B...Z9Z 
          ([A-Z][A-HJ-Y][0-9][A-Z]?))  # e.g. WC1 or WC1H
        )
      )
    \s?[0-9][A-Z]{2} # e.g. 5RX
  )
"""
re.match(regex,s,re.VERBOSE|re.IGNORECASE) # Can also use: re.X|re.I
```

::: {.notes}

This is the [government's own regex](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/488478/Bulk_Data_Transfer_-_additional_validation_valid_from_12_November_2015.pdf) but is probably *not* 100% accurate.

:::


## Applications of Regular Expressions

If our problem follows some set of articulable *rules* about permissible sequences of characters then we can *probably* validate it using a regex:

| Examples                                | More Examples                             |
| --------------------------------------- | ----------------------------------------- |
| Email                                   | Password                                  |
| Postcode                                | Phone number                              |
| Date                                    | Credit cards                              |
| Web scraping                      | Syntax highlighting                       |
| Sentence structure                            | Data wrangling                            |
| Searching for/within<br />files/content | Lexical analysis/<br />Language detection |

::: {.notes}
These are all good problems...
:::

## Additional Resources {.smaller}

- [Regexle](https://regexle.ithea.de/)
- [Regex 101](https://regex101.com)
- [Python Documentation](https://docs.python.org/3/howto/regex.html)
- [Real Python: Regular Expressions 1](https://realpython.com/regex-python/)
- [Real Python: Regular Expressions 2](https://realpython.com/regex-python-part-2/)
- [Data Camp RegEx Tutorial](https://www.datacamp.com/community/tutorials/python-regular-expression-tutorial)
- [Introduction to Regex](https://medium.com/better-programming/introduction-to-regex-8c18abdd4f70)
- [Understanding RegExes in Python](https://medium.com/better-programming/introduction-to-regex-8c18abdd4f70)
- [Demystifying RegExes in Python](https://medium.com/@snk.nitin/your-guide-to-using-regular-expressions-in-python-a7908b8e4b68)
- [Python RegExes](https://medium.com/@devopslearning/python-regular-expression-8ee28d35f3a7)
- [Mastering String Methods in Python](https://towardsdatascience.com/mastering-string-methods-in-python-456174ede911)

Thanks to [Yogesh Chavan](https://levelup.gitconnected.com/extremely-useful-regular-expression-examples-for-real-world-applications-567e844a0822) and [Nicola Pietroluongo](https://www.sitepoint.com/demystifying-regex-with-practical-examples/) for examples.

# Thank You {background-image="/img/web/title-slide.png" background-color="#f7eff5" background-opacity="0.2"}

<h3>References</h3>
