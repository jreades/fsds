---
author: "Jon Reades"
email: "j.reades@ucl.ac.uk"
title: "Iteration"
other: ""
date-as-string: "1st October 2025"
format: revealjs
---

## *it·er·a·tion*

/itə'rāSHən/

*Noun*

The repetition of a process or utterance.

- repetition of a mathematical or computational procedure applied to the result of a previous application, typically as a means of obtaining successively closer approximations to the solution of a problem.
- a new version of a piece of computer hardware or software. plural noun: *iterations*


::: {.notes}

By themselves, lists and variables aren't very useful if we can only access items either one at a time, or as slice. 

But if we can *iterate* over a list (do something to every item in a list) then we gain some serious *powers*.

Many programmers also call these *loops*.

:::

---

## Two Types of Iteration

:::: {.columns}
::: {.column width="50%"}

### 'For' loops

- Used with *finite* lists of *definite* length
- *For* each item in this list do something...

:::

::: {.column width="50%"}

### 'While' loops:

- Used with *unknown* or *non-finite* lists
- *While* a condition is still `True`, do something to the list...

:::
::::

## Making the Difference Memorable

{{< video https://youtu.be/9AJ0uoxtdCQ  width="750" height="500" >}}


## For Loops

This 'simple' loop allows us to print out every element of the list in turn:

```python
geographers = ['Rose','Massey','Jefferson']
for g in geographers:
  print(g)
```

Notice the format:

```python
for x in list:
  # ...do something using the current value of x...
```

::: {.notes}

Notice that this is the same `in` that we saw with `if 'Batty' in geographers`!

:::

## While Loops

This loop does the _same_ thing, but differently:

```python
geographers = ['Rose','Massey','Jefferson']
g = 0
while g < len(geographers):
  print( geographers[g] )
  g += 1
```

Notice the format:

```python
while <some condition is true>:
  # ...do something...
```


## Nesting Loops


We can use one loop 'inside' another loop! What do you think this might print?

```python
geographers = ['Rose','Massey','Jefferson']
for g in geographers:
  for h in g:
    print(h)
```

Huh??? Let's puzzle this out... 


## Debugging

When you see something completely new, it's often good to:

1. Add `print(...)` statements to see how the values of a variable are changing.
2. Comment out the parts you don't understand so that you can focus on the parts you *do*
3. Then *iteratively* add complexity!


## Step 1: The 'Outer Loop'

So I would start off with:

```python
geographers = ['Rose','Massey','Jefferson']
for g in geographers:
  print(g)
#   for h in g:
#   print(h)
```

This prints: 

```python
'Rose'
'Massey'
'Jefferson'
```

## Step 1: Summing Up

OK, so now we know:  

1. That `g` is the name of a geographer.
2. The 'outer' loop sets `g` to the name of a new geographer on *each iteration*.
3. So if `g` is set to `'Rose'` what does `for h in g:` do?

---

## Step 2: The 'Inner' Loop

We know change it like this: 
```python
for g in geographers:
  print(g)
  for h in g:
    print(h)
  break # <-- Notice this!
```

This prints: 
```python 
Rose
R
o
s
e
```

## Step 2: Summing Up

And *now* we know that:

1. `h` is looping over the _string_, meaning that a string can be treated _as_ a list!
2. And `break` is a really useful way to control a loop *while* you're testing your code!

## Recap

1. `for` iterates once over a collection items (e.g. a list).
2. `while` keeps going until a condition is False.

## Test Yourself

What will this code print? *I'd suggest that you **don't** run it!*

```python
geographers = ['Rose','Massey','Jefferson']
g = 0
while g < len(geographers):
  print( geographers[g] )
```

## Test Yourself (Tricksy Version)

Here's a really tricky one! The following two blocks of code produce the *same* output, *how* are they different?

```python
geographers = ['Rose','Massey','Jefferson']
geographers.reverse()
for g in geographers:
  print(g)
```

And:

```python
geographers = ['Rose','Massey','Jefferson']
g = len(geographers)-1
while g >= 0:
  print( geographers[g] )
  g -= 1
```

## One More Thing...

Let's go back to the [Lists](2.3-Lists.qmd) examples for a second:

```python
female_geographers = ['Rose','Valentine','Massey','Jefferson']
male_geographers = ['Von Humboldt','Harvey','Hägerstrand']
all_geographers = []
all_geographers.append(female_geographers)
all_geographers.append(male_geographers)
```

Have a think about how this code works:

```python
for ag in all_geographers:
  for g in ag:
    print(g)
```

## Additional Resources {.smaller}

- [What is Iteration?](https://www.linkedin.com/learning/python-quick-start/what-is-iteration)
- [Loops](https://www.linkedin.com/learning/learning-python-2/loops)
- [For Loop](https://www.linkedin.com/learning/python-quick-start/for-loop)
- [While Loop](https://www.linkedin.com/learning/python-quick-start/while-loop)

We don't cover the concept of recursion, but it's quite a powerful idea and links nicely with Iteration:

- [What is a recursive function?](https://www.linkedin.com/learning/python-quick-start/what-is-a-recursive-function)
- [Define recursive functions](https://www.linkedin.com/learning/python-quick-start/define-recursive-functions)

# Thank You {background-image="/img/web/title-slide.png" background-color="#0F0C11" background-opacity="0.2"}

<h3>References</h3>
